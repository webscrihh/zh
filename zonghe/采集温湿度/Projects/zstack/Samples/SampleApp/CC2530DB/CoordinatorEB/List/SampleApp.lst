###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         08/Jun/2020  18:40:37 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\Source\SampleApp.c                 #
#    Command line       =  -f E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func      #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D #
#                          B\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0            #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂ #
#                          Êª¶È\Projects\zstack\Samples\SampleApp\Source\Samp #
#                          leApp.c -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC    #
#                          -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC         #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\CoordinatorEB\List\ -lA   #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\CoordinatorEB\List\       #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\CoordinatorEB\Obj\ -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\ -I                    #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\Source\ -I             #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\  #
#                          -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\hal\include\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶ #
#                          È\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\hal\target\CC2530EB\ -I       #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mac\high_level\ -I               #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\ -I                           #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\low_level\srf04\single_chip\ -I               #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mt\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\osal\include\ -I                          #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \services\saddr\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶ #
#                          È\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\Components\services\sdata\ -I            #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\af\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sapi\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sec\ -I                     #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \stack\sys\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \zmac\ -I E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz --require_prototypes     #
#    List file          =  E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\CoordinatorEB\List\Sample #
#                          App.lst                                            #
#    Object file        =  E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleA #
#                          pp.r51                                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\web\test\×ÛºÏÏîÄ¿\²É¼¯ÎÂÊª¶È\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "DHT11.h"   //ÎÂÊª¶È×¨ÓÃ
     77          
     78          /*********************************************************************
     79           * MACROS
     80           */
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */
     93          
     94          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
     96          {
     97            SAMPLEAPP_PERIODIC_CLUSTERID,
     98            SAMPLEAPP_FLASH_CLUSTERID
     99          };
    100          

   \                                 In  segment XDATA_ROM_C, align 1
    101          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    102          {
    103            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    104            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    105            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    106            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    107            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    110            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    111            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    112          };
    113          
    114          // This is the Endpoint/Interface description.  It is defined here, but
    115          // filled-in in SampleApp_Init().  Another way to go would be to fill
    116          // in the structure here and make it a "const" (in code space).  The
    117          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * EXTERNAL VARIABLES
    122           */
    123          
    124          /*********************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132                                    // This variable will be received when
    133                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t Point_To_Point_DstAddr;//Íø·äµã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    152          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    153          void SampleApp_SendPeriodicMessage( void );
    154          void SampleApp_SendFlashMessage( uint16 flashTime );
    155          void SampleApp_SendGroupMessage(void); //Íø·ä×é²¥Í¨Ñ¶·¢ËÍº¯Êý¶¨Òå.
    156          void SampleApp_SendPointToPointMessage(void );
    157          
    158          /*********************************************************************
    159           * NETWORK LAYER CALLBACKS
    160           */
    161          
    162          /*********************************************************************
    163           * PUBLIC FUNCTIONS
    164           */
    165          
    166          /*********************************************************************
    167           * @fn      SampleApp_Init
    168           *
    169           * @brief   Initialization function for the Generic App Task.
    170           *          This is called during initialization and should contain
    171           *          any application specific initialization (ie. hardware
    172           *          initialization/setup, table initialization, power up
    173           *          notificaiton ... ).
    174           *
    175           * @param   task_id - the ID assigned by OSAL.  This ID should be
    176           *                    used to send messages and set timers.
    177           *
    178           * @return  none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    181          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    182            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    183            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    184            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    185            
    186            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    187            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    188            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    189            
    190            //ÎÂÊª¶È´«¸ÐÆ÷³õÊ¼»¯ P0.6
    191            P0SEL &= 0xbf;
   \   00002B   53F3BF       ANL     0xf3,#0xbf
    192            
    193            // Device hardware initialization can be added here or in main() (Zmain.c).
    194            // If the hardware is application specific - add it here.
    195            // If the hardware is other parts of the device add it in main().
    196          
    197           #if defined ( BUILD_ALL_DEVICES )
    198            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    199            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    200            // together - if they are - we will start up a coordinator. Otherwise,
    201            // the device will start as a router.
    202            if ( readCoordinatorJumper() )
    203              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    204            else
    205              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    206          #endif // BUILD_ALL_DEVICES
    207          
    208          #if defined ( HOLD_AUTO_START )
    209            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    210            //  from starting the device and wait for the application to
    211            //  start the device.
    212            ZDOInitDevice(0);
    213          #endif
    214          
    215            // Setup for the periodic message's destination address
    216            // Broadcast to everyone
    217            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000031   740F         MOV     A,#0xf
   \   000033   F0           MOVX    @DPTR,A
    218            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000034   A3           INC     DPTR
   \   000035   7414         MOV     A,#0x14
   \   000037   F0           MOVX    @DPTR,A
    219            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    220          
    221            // Setup for the flash command's destination address - Group 1
    222            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    223            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    224            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004D   7411         MOV     A,#0x11
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    225            
    226            // Íø·äµã¶ÔµãÍ¨Ñ¶¶¨Òå
    227              Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//µã²¥
   \   000053   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   000056   7402         MOV     A,#0x2
   \   000058   F0           MOVX    @DPTR,A
    228              Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    229              Point_To_Point_DstAddr.addr.shortAddr = 0x0000; //·¢¸øÐ­µ÷Æ÷
   \   00005D   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
    230          
    231          
    232            // Fill out the endpoint description.
    233            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000064   90....       MOV     DPTR,#SampleApp_epDesc
   \   000067   7414         MOV     A,#0x14
   \   000069   F0           MOVX    @DPTR,A
    234            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000071   F0           MOVX    @DPTR,A
    235            SampleApp_epDesc.simpleDesc
    236                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
    237            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00007A   A3           INC     DPTR
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
    238          
    239            // Register the endpoint description with the AF
    240            afRegister( &SampleApp_epDesc );
   \   00007D                ; Setup parameters for call to function afRegister
   \   00007D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000081   12....       LCALL   ??afRegister?relay
    241          
    242            // Register for all key events - This app will handle all key events
    243            RegisterForKeys( SampleApp_TaskID );
   \   000084                ; Setup parameters for call to function RegisterForKeys
   \   000084   90....       MOV     DPTR,#SampleApp_TaskID
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ??RegisterForKeys?relay
    244          
    245            // By default, all devices start out in Group 88
    246            SampleApp_Group.ID = 0x0088;                        //88×éºÅ
   \   00008C   90....       MOV     DPTR,#SampleApp_Group
   \   00008F   7488         MOV     A,#-0x78
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    247            osal_memcpy( SampleApp_Group.name, "Group 11", 8);//×é²¥Ãû³Æ
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   75....       MOV     ?V0 + 0,#`?<Constant "Group 11">` & 0xff
   \   000098   75....       MOV     ?V0 + 1,#(`?<Constant "Group 11">` >> 8) & 0xff
   \   00009B   F5..         MOV     ?V0 + 2,A
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A2   7C08         MOV     R4,#0x8
   \   0000A4   7D00         MOV     R5,#0x0
   \   0000A6   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A8   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AA   12....       LCALL   ??osal_memcpy?relay
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
    248            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000B2                ; Setup parameters for call to function aps_AddGroup
   \   0000B2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B6   7914         MOV     R1,#0x14
   \   0000B8   12....       LCALL   ??aps_AddGroup?relay
    249          
    250          #if defined ( LCD_SUPPORTED )
    251            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000BB                ; Setup parameters for call to function HalLcdWriteString
   \   0000BB   7901         MOV     R1,#0x1
   \   0000BD   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BF   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000C1   12....       LCALL   ??HalLcdWriteString?relay
    252          #endif
    253          }
   \   0000C4   7F03         MOV     R7,#0x3
   \   0000C6   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C9                REQUIRE P0SEL
    254          
    255          /*********************************************************************
    256           * @fn      SampleApp_ProcessEvent
    257           *
    258           * @brief   Generic Application Task event processor.  This function
    259           *          is called to process all events for the task.  Events
    260           *          include timers, messages and any other user defined events.
    261           *
    262           * @param   task_id  - The OSAL assigned task ID.
    263           * @param   events - events to process.  This is a bit map and can
    264           *                   contain more than one event.
    265           *
    266           * @return  none
    267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    268          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    269          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    270            afIncomingMSGPacket_t *MSGpkt;
    271            (void)task_id;  // Intentionally unreferenced parameter
    272          
    273            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   6075         JZ      ??SampleApp_ProcessEvent_0
    274            {
    275              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   8026         SJMP    ??SampleApp_ProcessEvent_1
    276              while ( MSGpkt )
    277              {
    278                switch ( MSGpkt->hdr.event )
    279                {
    280                  // Received when a key is pressed
    281                  case KEY_CHANGE:
    282                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    283                    break;
    284          
    285                  // Received when a messages is received (OTA) for this endpoint
    286                  case AF_INCOMING_MSG_CMD:
    287                    SampleApp_MessageMSGCB( MSGpkt );
    288                    break;
    289          
    290                  // Received whenever the device changes state in the network
    291                  case ZDO_STATE_CHANGE:
    292                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   90....       MOV     DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX    @DPTR,A
    293                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)|| //Ð­µ÷Æ÷²»¸ø×Ô¼ºµã²¥
    294                         (SampleApp_NwkState == DEV_ROUTER)
    295                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6406         XRL     A,#0x6
   \   000021   7010         JNZ     ??SampleApp_ProcessEvent_4
    296                    {
    297                      // Start sending the periodic message in a regular interval.
    298                      osal_start_timerEx( SampleApp_TaskID,
    299                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    300                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7C88         MOV     R4,#-0x78
   \   000025   7D13         MOV     R5,#0x13
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_start_timerEx?relay
    301                    }
    302                    else
    303                    {
    304                      // Device is no longer in the network
    305                    }
    306                    break;
    307          
    308                  default:
    309                    break;
    310                }
    311          
    312                // Release the memory
    313                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0 + 0
   \   000035   AB..         MOV     R3,?V0 + 1
   \   000037   12....       LCALL   ??osal_msg_deallocate?relay
    314          
    315                // Next - if one is available
    316                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_msg_receive?relay
   \   000042   8A..         MOV     ?V0 + 0,R2
   \   000044   8B..         MOV     ?V0 + 1,R3
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   24E6         ADD     A,#-0x1a
   \   000055   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD     A,#0x5a
   \   000059   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD     A,#-0x11
   \   00005D   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000073   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV     R2,?V0 + 0
   \   000077   AB..         MOV     R3,?V0 + 1
   \   000079   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007C   80B5         SJMP    ??SampleApp_ProcessEvent_4
    317              }
    318          
    319              // return unprocessed events
    320              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000083   FB           MOV     R3,A
   \   000084   02....       LJMP    ??SampleApp_ProcessEvent_9 & 0xFFFF
    321            }
    322          
    323            // Send a message out - This event is generated by a timer
    324            //  (setup in SampleApp_Init()).
    325            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000087   EE           MOV     A,R6
   \   000088   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008A   4003         JC      $+5
   \   00008C   02....       LJMP    ??SampleApp_ProcessEvent_10 & 0xFFFF
    326            {
    327              
    328              uint8 T[8];     //ÎÂ¶È+ÌáÊ¾·û     
    329              DHT11();   //ÎÂ¶È¼ì²â    
   \   00008F                ; Setup parameters for call to function DHT11
   \   00008F   12....       LCALL   ??DHT11?relay
    330              T[0]=wendu_shi+48;
   \   000092   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000095   F0           MOVX    @DPTR,A
    331              T[1]=wendu_ge+48;
   \   000096   90....       MOV     DPTR,#wendu_ge
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   2430         ADD     A,#0x30
   \   00009C   C0E0         PUSH    A
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP     A
   \   0000A5   F0           MOVX    @DPTR,A
    332              T[2]=' ';
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   7420         MOV     A,#0x20
   \   0000AD   12....       LCALL   ?Subroutine4 & 0xFFFF
    333              T[3]=shidu_shi+48;
   \                     ??CrossCallReturnLabel_4:
   \   0000B0   C0E0         PUSH    A
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
    334              T[4]=shidu_ge+48;
   \   0000BA   90....       MOV     DPTR,#shidu_ge
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   2430         ADD     A,#0x30
   \   0000C0   C0E0         PUSH    A
   \   0000C2   7404         MOV     A,#0x4
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   D0E0         POP     A
   \   0000C9   F0           MOVX    @DPTR,A
    335              T[5]=' ';
   \   0000CA   7405         MOV     A,#0x5
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   7420         MOV     A,#0x20
   \   0000D1   F0           MOVX    @DPTR,A
    336              T[6]=' ';
   \   0000D2   7406         MOV     A,#0x6
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   7420         MOV     A,#0x20
   \   0000D9   F0           MOVX    @DPTR,A
    337              T[7]=' ';   
   \   0000DA   7407         MOV     A,#0x7
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   7420         MOV     A,#0x20
   \   0000E1   F0           MOVX    @DPTR,A
    338            /*******´®¿Ú´òÓ¡ WEBEE*********/
    339              HalUARTWrite(0,"temp=",5);
   \   0000E2                ; Setup parameters for call to function HalUARTWrite
   \   0000E2   7C05         MOV     R4,#0x5
   \   0000E4   7D00         MOV     R5,#0x0
   \   0000E6   7A..         MOV     R2,#`?<Constant "temp=">` & 0xff
   \   0000E8   7B..         MOV     R3,#(`?<Constant "temp=">` >> 8) & 0xff
   \   0000EA   12....       LCALL   ?Subroutine5 & 0xFFFF
    340              HalUARTWrite(0,T,2);
   \                     ??CrossCallReturnLabel_7:
   \   0000ED   85..82       MOV     DPL,?XSP + 0
   \   0000F0   85..83       MOV     DPH,?XSP + 1
   \   0000F3   AA82         MOV     R2,DPL
   \   0000F5   AB83         MOV     R3,DPH
   \   0000F7   7900         MOV     R1,#0x0
   \   0000F9   12....       LCALL   ??HalUARTWrite?relay
    341              HalUARTWrite(0,"\n",1);    
   \   0000FC   75....       MOV     ?V0 + 0,#`?<Constant "\\n">` & 0xff
   \   0000FF   75....       MOV     ?V0 + 1,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000102                ; Setup parameters for call to function HalUARTWrite
   \   000102   7C01         MOV     R4,#0x1
   \   000104   7D00         MOV     R5,#0x0
   \   000106   AA..         MOV     R2,?V0 + 0
   \   000108   AB..         MOV     R3,?V0 + 1
   \   00010A   7900         MOV     R1,#0x0
   \   00010C   12....       LCALL   ??HalUARTWrite?relay
    342              HalUARTWrite(0,"humidity=",9);
   \   00010F                ; Setup parameters for call to function HalUARTWrite
   \   00010F   7C09         MOV     R4,#0x9
   \   000111   7D00         MOV     R5,#0x0
   \   000113   7A..         MOV     R2,#`?<Constant "humidity=">` & 0xff
   \   000115   7B..         MOV     R3,#(`?<Constant "humidity=">` >> 8) & 0xff
   \   000117   12....       LCALL   ?Subroutine5 & 0xFFFF
    343              HalUARTWrite(0,T+3,2);
   \                     ??CrossCallReturnLabel_8:
   \   00011A   7403         MOV     A,#0x3
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   AA82         MOV     R2,DPL
   \   000121   AB83         MOV     R3,DPH
   \   000123   12....       LCALL   ??Subroutine11_0 & 0xFFFF
    344              HalUARTWrite(0,"\n",1);    
    345              /*******LCDÏÔÊ¾  WEBEE*********/
    346              //HalLcdWriteString("Temp: humidity:", HAL_LCD_LINE_3 );//LCDÏÔÊ¾
    347               //HalLcdWriteString(T,HAL_LCD_LINE_4 );//LCDÏÔÊ¾   
    348          
    349               SampleApp_SendGroupMessage();    //ÖÜÆÚÐÔ×é²¥
   \                     ??CrossCallReturnLabel_22:
   \   000126                ; Setup parameters for call to function SampleApp_SendGroupMessage
   \   000126   12....       LCALL   ??SampleApp_SendGroupMessage?relay
    350               
    351              // Setup to send message again in normal period (+ a little jitter)
    352              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    353                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000129                ; Setup parameters for call to function osal_rand
   \   000129   12....       LCALL   ??osal_rand?relay
   \   00012C                ; Setup parameters for call to function osal_start_timerEx
   \   00012C   EA           MOV     A,R2
   \   00012D   2488         ADD     A,#-0x78
   \   00012F   FC           MOV     R4,A
   \   000130   E4           CLR     A
   \   000131   3413         ADDC    A,#0x13
   \   000133   FD           MOV     R5,A
   \   000134   7A01         MOV     R2,#0x1
   \   000136   7B00         MOV     R3,#0x0
   \   000138   90....       MOV     DPTR,#SampleApp_TaskID
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F9           MOV     R1,A
   \   00013D   12....       LCALL   ??osal_start_timerEx?relay
    354          
    355              // return unprocessed events
    356              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000140   EE           MOV     A,R6
   \   000141   6401         XRL     A,#0x1
   \   000143   FA           MOV     R2,A
   \   000144   EF           MOV     A,R7
   \   000145   02....       LJMP    ??SampleApp_ProcessEvent_8 & 0xFFFF
    357            }
    358          
    359            // Discard unknown events
    360            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   000148   7A00         MOV     R2,#0x0
   \   00014A   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   00014C   7408         MOV     A,#0x8
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000151   7F04         MOV     R7,#0x4
   \   000153   02....       LJMP    ?BANKED_LEAVE_XDATA
    361          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C02         MOV     R4,#0x2
   \   000007   7D00         MOV     R5,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   AA..         MOV     R2,?V0 + 0
   \   00000B   AB..         MOV     R3,?V0 + 1
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#wendu_shi
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2430         ADD     A,#0x30
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#shidu_shi
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2430         ADD     A,#0x30
   \   000007   22           RET
    362          
    363          /*********************************************************************
    364           * Event Generation Functions
    365           */
    366          /*********************************************************************
    367           * @fn      SampleApp_HandleKeys
    368           *
    369           * @brief   Handles all key events for this device.
    370           *
    371           * @param   shift - true if in shift/alt.
    372           * @param   keys - bit field for key events. Valid entries:
    373           *                 HAL_KEY_SW_2
    374           *                 HAL_KEY_SW_1
    375           *
    376           * @return  none
    377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    379          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    380            (void)shift;  // Intentionally unreferenced parameter
    381            
    382            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    383            {
    384              /* This key sends the Flash Command is sent to Group 1.
    385               * This device will not receive the Flash Command from this
    386               * device (even if it belongs to group 1).
    387               */
    388              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    389            }
    390          
    391            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    392            {
    393              /* The Flashr Command is sent to Group 1.
    394               * This key toggles this device in and out of group 1.
    395               * If this device doesn't belong to group 1, this application
    396               * will not receive the Flash command sent to group 1.
    397               */
    398              aps_Group_t *grp;
    399              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    400              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A11         MOV     R2,#0x11
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    401              {
    402                // Remove from the group
    403                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A11         MOV     R2,#0x11
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    404              }
    405              else
    406              {
    407                // Add to the flash group
    408                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    409              }
    410            }
    411          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine13_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    412          
    413          /*********************************************************************
    414           * LOCAL FUNCTIONS
    415           */
    416          
    417          /*********************************************************************
    418           * @fn      SampleApp_MessageMSGCB
    419           *
    420           * @brief   Data message processor callback.  This function processes
    421           *          any incoming data - probably from other devices.  So, based
    422           *          on cluster ID, perform the intended action.
    423           *
    424           * @param   none
    425           *
    426           * @return  none
    427           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    429          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    430            uint16 flashTime;
    431          
    432            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000019   0100         DW        1
   \   00001B   01           DB        1
   \   00001C   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00001E   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_2
    433            {
    434              case SAMPLEAPP_FLASH_CLUSTERID:         //×é²¥½ÓÊÕ
    435                 /***********ÎÂ¶È´òÓ¡***************/
    436               //HalUARTWrite(0,"Temp is:",8);        //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
    437               //HalUARTWrite(0,&pkt->cmd.Data[0],2); //ÎÂ¶È
    438               //HalUARTWrite(0,"\n",1);              // »Ø³µ»»ÐÐ     
    439                 /***************Êª¶È´òÓ¡****************/
    440               //HalUARTWrite(0,"Humidity is:",12);    //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
    441               //HalUARTWrite(0,&pkt->cmd.Data[2],2);  //Êª¶È
    442               //HalUARTWrite(0,"\n",1);              // »Ø³µ»»ÐÐ
    443               
    444               
    445                        ////´òÓ¡ÄÚÈÝ
    446               HalUARTWrite(0,&pkt->cmd.Data[0],2);    //×éºÅ            
   \                     ??SampleApp_MessageMSGCB_2:
   \   000022   EA           MOV     A,R2
   \   000023   2422         ADD     A,#0x22
   \   000025   FE           MOV     R6,A
   \   000026   EB           MOV     A,R3
   \   000027   3400         ADDC    A,#0x0
   \   000029   FF           MOV     R7,A
   \   00002A                ; Setup parameters for call to function HalUARTWrite
   \   00002A   7C02         MOV     R4,#0x2
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FA           MOV     R2,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FB           MOV     R3,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   12....       LCALL   ??HalUARTWrite?relay
    447               HalUARTWrite(0," ",1);                //´òÓ¡¿Õ¸ñ
   \   00003C   75....       MOV     ?V0 + 0,#`?<Constant " ">` & 0xff
   \   00003F   75....       MOV     ?V0 + 1,#(`?<Constant " ">` >> 8) & 0xff
   \   000042                ; Setup parameters for call to function HalUARTWrite
   \   000042   7C01         MOV     R4,#0x1
   \   000044   7D00         MOV     R5,#0x0
   \   000046   AA..         MOV     R2,?V0 + 0
   \   000048   AB..         MOV     R3,?V0 + 1
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   12....       LCALL   ??HalUARTWrite?relay
    448               HalUARTWrite(0,&pkt->cmd.Data[2],3);    //Ãû×Ö           
   \   00004F                ; Setup parameters for call to function HalUARTWrite
   \   00004F   7C03         MOV     R4,#0x3
   \   000051   7D00         MOV     R5,#0x0
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   2402         ADD     A,#0x2
   \   00005A   12....       LCALL   ?Subroutine1 & 0xFFFF
    449               HalUARTWrite(0," ",1);                //´òÓ¡¿Õ¸ñ
    450               HalUARTWrite(0,&pkt->cmd.Data[5],10);    //Ñ§ºÅ       
   \                     ??CrossCallReturnLabel_19:
   \   00005D                ; Setup parameters for call to function HalUARTWrite
   \   00005D   7C0A         MOV     R4,#0xa
   \   00005F   7D00         MOV     R5,#0x0
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2405         ADD     A,#0x5
   \   000068   12....       LCALL   ?Subroutine1 & 0xFFFF
    451               HalUARTWrite(0," ",1);                //´òÓ¡¿Õ¸ñ
    452               HalUARTWrite(0,&pkt->cmd.Data[15],9);    //×éÃû         
   \                     ??CrossCallReturnLabel_20:
   \   00006B                ; Setup parameters for call to function HalUARTWrite
   \   00006B   7C09         MOV     R4,#0x9
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   240F         ADD     A,#0xf
   \   000076   12....       LCALL   ?Subroutine1 & 0xFFFF
    453               HalUARTWrite(0," ",1);                //´òÓ¡¿Õ¸ñ
    454               
    455               HalUARTWrite(0,&pkt->cmd.Data[24],2);    //ÎÂ¶È
   \                     ??CrossCallReturnLabel_21:
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C02         MOV     R4,#0x2
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   E0           MOVX    A,@DPTR
   \   000082   2418         ADD     A,#0x18
   \   000084   12....       LCALL   ?Subroutine7 & 0xFFFF
    456               HalUARTWrite(0,"¡æ",1);                  //ÉãÊÏ¶È·ûºÅ
   \                     ??CrossCallReturnLabel_13:
   \   000087   7A..         MOV     R2,#`?<Constant "\\241\\346">` & 0xff
   \   000089   7B..         MOV     R3,#(`?<Constant "\\241\\346">` >> 8) & 0xff
   \   00008B   12....       LCALL   ?Subroutine5 & 0xFFFF
    457               HalUARTWrite(0,&pkt->cmd.Data[26],2);    //×éÃû
   \                     ??CrossCallReturnLabel_9:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   241A         ADD     A,#0x1a
   \   000095   12....       LCALL   ?Subroutine7 & 0xFFFF
    458               HalUARTWrite(0,"H",1);                   //Êª¶È·ûºÅ
   \                     ??CrossCallReturnLabel_14:
   \   000098   7A..         MOV     R2,#`?<Constant "H">` & 0xff
   \   00009A   7B..         MOV     R3,#(`?<Constant "H">` >> 8) & 0xff
   \   00009C   7900         MOV     R1,#0x0
   \   00009E   12....       LCALL   ??HalUARTWrite?relay
    459               break;
   \   0000A1   803D         SJMP    ??SampleApp_MessageMSGCB_0
    460          
    461              case SAMPLEAPP_PERIODIC_CLUSTERID:     //¹ã²¥½ÓÊÕ
    462                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    463                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000A3   EA           MOV     A,R2
   \   0000A4   2422         ADD     A,#0x22
   \   0000A6   FE           MOV     R6,A
   \   0000A7   EB           MOV     A,R3
   \   0000A8   3400         ADDC    A,#0x0
   \   0000AA   FF           MOV     R7,A
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4                ; Setup parameters for call to function HalLedBlink
   \   0000B4   8882         MOV     DPL,R0
   \   0000B6   8983         MOV     DPH,R1
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FA           MOV     R2,A
   \   0000BB   8882         MOV     DPL,R0
   \   0000BD   8983         MOV     DPH,R1
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   2400         ADD     A,#0x0
   \   0000C6   F5..         MOV     ?V0 + 0,A
   \   0000C8   E4           CLR     A
   \   0000C9   39           ADDC    A,R1
   \   0000CA   F5..         MOV     ?V0 + 1,A
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?US_SHR
   \   0000D3   AC..         MOV     R4,?V0 + 0
   \   0000D5   AD..         MOV     R5,?V0 + 1
   \   0000D7   7B32         MOV     R3,#0x32
   \   0000D9   7A04         MOV     R2,#0x4
   \   0000DB   7908         MOV     R1,#0x8
   \   0000DD   12....       LCALL   ??HalLedBlink?relay
    464                break;
    465            }
    466          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000E0   02....       LJMP    ??Subroutine13_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   7900         MOV     R1,#0x0
   \   000008   12....       LCALL   ??HalUARTWrite?relay
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B   7C01         MOV     R4,#0x1
   \   00000D   7D00         MOV     R5,#0x0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006                REQUIRE ??Subroutine11_0
   \   000006                ; // Fall through to label ??Subroutine11_0
    467          
    468          /*********************************************************************
    469           * @fn      SampleApp_SendPeriodicMessage
    470           *
    471           * @brief   Send the periodic message.
    472           *
    473           * @param   none
    474           *
    475           * @return  none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    478          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    479            uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};//×Ô¶¨ÒåÊý¾Ý
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` & 0xff
   \   00001A   740A         MOV     A,#0xa
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    480            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    481                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    482                                 10,//×Ö½ÚÊý
    483                                 data,//Ö¸ÕëÍ·
    484                                 &SampleApp_TransID,
    485                                 AF_DISCV_ROUTE,
    486                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..0A       MOV     ?V0 + 0,#0xa
   \   000045   75..00       MOV     ?V0 + 1,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..01       MOV     ?V0 + 0,#0x1
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7920         MOV     R1,#0x20
   \   000057   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000059   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005B   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00005D   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00005F   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    487            {
    488            }
    489            else
    490            {
    491              // Error occurred in request to send.
    492            }
    493          }
   \   000065   740A         MOV     A,#0xa
   \   000067   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine13_0
   \   000003                ; // Fall through to label ??Subroutine13_0
    494          
    495          /*********************************************************************
    496           * @fn      SampleApp_SendFlashMessage
    497           *
    498           * @brief   Send the flash message to group 1.
    499           *
    500           * @param   flashTime - in milliseconds
    501           *
    502           * @return  none
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    505          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    506            uint8 buffer[3];
    507            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    508            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    509            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine6 & 0xFFFF
    510          
    511            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    512                                 SAMPLEAPP_FLASH_CLUSTERID,
    513                                 3,
    514                                 buffer,
    515                                 &SampleApp_TransID,
    516                                 AF_DISCV_ROUTE,
    517                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_10:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000031   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   8582..       MOV     ?V0 + 0,DPL
   \   000041   8583..       MOV     ?V0 + 1,DPH
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..03       MOV     ?V0 + 0,#0x3
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..02       MOV     ?V0 + 0,#0x2
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
    518            {
    519            }
    520            else
    521            {
    522              // Error occurred in request to send.
    523            }
    524          }
   \   000062   7403         MOV     A,#0x3
   \   000064   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000008   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine12_0
   \   00000A                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV     ?V0 + 0,#0x1e
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET
    525          
    526          /*********************************************************************
    527          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          void SampleApp_SendPointToPointMessage( void )
   \                     SampleApp_SendPointToPointMessage:
    529          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    530            uint8 T_H[4];//ÎÂÊª¶È
    531            T_H[0]=wendu_shi+48;
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00000D   12....       LCALL   ?Subroutine2 & 0xFFFF
    532            T_H[1]=wendu_ge%10+48;
   \                     ??CrossCallReturnLabel_0:
   \   000010   C0E0         PUSH    A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   D0E0         POP     A
   \   000019   12....       LCALL   ?Subroutine4 & 0xFFFF
    533            
    534            T_H[2]=shidu_shi+48;
   \                     ??CrossCallReturnLabel_5:
   \   00001C   C0E0         PUSH    A
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   12....       LCALL   ?Subroutine3 & 0xFFFF
    535            T_H[3]=shidu_ge%10+48;
   \                     ??CrossCallReturnLabel_2:
   \   000028   C0E0         PUSH    A
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   D0E0         POP     A
   \   000031   12....       LCALL   ?Subroutine6 & 0xFFFF
    536            
    537            if ( AF_DataRequest( &Point_To_Point_DstAddr,
    538                                 &SampleApp_epDesc,
    539                                 SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    540                                 4,
    541                                 T_H,
    542                                 &SampleApp_TransID,
    543                                 AF_DISCV_ROUTE,
    544                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_11:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00003A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   8582..       MOV     ?V0 + 0,DPL
   \   00004A   8583..       MOV     ?V0 + 1,DPH
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..04       MOV     ?V0 + 0,#0x4
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..03       MOV     ?V0 + 0,#0x3
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7920         MOV     R1,#0x20
   \   000067   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000069   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00006B   7A..         MOV     R2,#Point_To_Point_DstAddr & 0xff
   \   00006D   7B..         MOV     R3,#(Point_To_Point_DstAddr >> 8) & 0xff
   \   00006F   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    545            {
    546            }
    547            else
    548            {
    549              // Error occurred in request to send.
    550            }
    551          
    552          
    553          }
   \   000075   7404         MOV     A,#0x4
   \   000077   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#shidu_ge
   \   000004   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#wendu_ge
   \   000004   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F00A       MOV     B,#0xa
   \   000004   84           DIV     AB
   \   000005   E5F0         MOV     A,B
   \   000007   2430         ADD     A,#0x30
   \   000009   22           RET
    554          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          void SampleApp_SendGroupMessage( void )       ///×é¹ã²¥
   \                     SampleApp_SendGroupMessage:
    556          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    557            uint8 T_H[28] = {'1', '1', 'W', 'H', 'H', '1', '9', '3', '0', '3', '2', '0', '0', '0', '1', 
    558                             'I',  96, 'G', 'r', 'o', 'u', 'p', '1', '1', '0', '0', '0', '0'};//ÎÂÊª¶È
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {49, 49, 87, 72, 72, 49, 57, 51, 48` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {49, 49, 87, 72, 72, 49, 57, 51, 48` & 0xff
   \   00001A   741C         MOV     A,#0x1c
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    559            T_H[24]=wendu_shi+48;
   \   00001F   90....       MOV     DPTR,#wendu_shi
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2430         ADD     A,#0x30
   \   000025   C0E0         PUSH    A
   \   000027   7418         MOV     A,#0x18
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   12....       LCALL   ?Subroutine2 & 0xFFFF
    560            T_H[25]=wendu_ge%10+48;
   \                     ??CrossCallReturnLabel_1:
   \   000031   C0E0         PUSH    A
   \   000033   7419         MOV     A,#0x19
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   D0E0         POP     A
   \   00003A   12....       LCALL   ?Subroutine4 & 0xFFFF
    561            
    562            T_H[26]=shidu_shi+48;
   \                     ??CrossCallReturnLabel_6:
   \   00003D   C0E0         PUSH    A
   \   00003F   741A         MOV     A,#0x1a
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   D0E0         POP     A
   \   000046   12....       LCALL   ?Subroutine3 & 0xFFFF
    563            T_H[27]=shidu_ge%10+48;
   \                     ??CrossCallReturnLabel_3:
   \   000049   C0E0         PUSH    A
   \   00004B   741B         MOV     A,#0x1b
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   12....       LCALL   ?Subroutine6 & 0xFFFF
    564            
    565            
    566            if ( AF_DataRequest( & SampleApp_Flash_DstAddr,
    567                                 &SampleApp_epDesc,
    568                                 SAMPLEAPP_FLASH_CLUSTERID,
    569                                 28,
    570                                 T_H,
    571                                 &SampleApp_TransID,
    572                                 AF_DISCV_ROUTE,
    573                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_12:
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00005B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7403         MOV     A,#0x3
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   8582..       MOV     ?V0 + 0,DPL
   \   00006B   8583..       MOV     ?V0 + 1,DPH
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   75..1C       MOV     ?V0 + 0,#0x1c
   \   000076   75..00       MOV     ?V0 + 1,#0x0
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   75..02       MOV     ?V0 + 0,#0x2
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
    574            {
    575            }
    576            else
    577            {
    578              // Error occurred in request to send.
    579            }
    580          }
   \   00008C   741C         MOV     A,#0x1c
   \   00008E                REQUIRE ?Subroutine0
   \   00008E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointToPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointToPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendGroupMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendGroupMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 11">`:
   \   000000   47726F75     DB "Group 11"
   \            70203131
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "temp=">`:
   \   000000   74656D70     DB "temp="
   \            3D00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humidity=">`:
   \   000000   68756D69     DB "humidity="
   \            64697479
   \            3D00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\241\\346">`:
   \   000000   A1E600       DB "\241\346"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "H">`:
   \   000000   4800         DB "H"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {49, 49, 87, 72, 72, 49, 57, 51, 48`:
   \   000000   31           DB 49
   \   000001   31           DB 49
   \   000002   57           DB 87
   \   000003   48           DB 72
   \   000004   48           DB 72
   \   000005   31           DB 49
   \   000006   39           DB 57
   \   000007   33           DB 51
   \   000008   30           DB 48
   \   000009   33           DB 51
   \   00000A   32           DB 50
   \   00000B   30           DB 48
   \   00000C   30           DB 48
   \   00000D   30           DB 48
   \   00000E   31           DB 49
   \   00000F   49           DB 73
   \   000010   60           DB 96
   \   000011   47           DB 71
   \   000012   72           DB 114
   \   000013   6F           DB 111
   \   000014   75           DB 117
   \   000015   70           DB 112
   \   000016   31           DB 49
   \   000017   31           DB 49
   \   000018   30           DB 48
   \   000019   30           DB 48
   \   00001A   30           DB 48
   \   00001B   30           DB 48
    581          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     30
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     30
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             1      0     20
       -> osal_msg_receive              0      0     40
       -> osal_start_timerEx            0      0     40
       -> osal_msg_deallocate           0      0     40
       -> osal_msg_receive              0      0     40
       -> SampleApp_HandleKeys          0      0     40
       -> SampleApp_MessageMSGCB        0      0     40
       -> DHT11                         0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> SampleApp_SendGroupMessage
                                        0      0     40
       -> osal_rand                     0      0     40
       -> osal_start_timerEx            0      0     40
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendGroupMessage         2      0     67
       -> AF_DataRequest                0      0     94
     SampleApp_SendPeriodicMessage      2      0     29
       -> AF_DataRequest                0      0     58
     SampleApp_SendPointToPointMessage
                                        1      0     23
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0SEL                                             1
     SampleApp_ClusterList                             6
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     Point_To_Point_DstAddr                           12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     SampleApp_Init                                  201
     SampleApp_ProcessEvent                          342
     ?Subroutine5                                     10
     ??Subroutine11_0                                 19
     ?Subroutine8                                     13
     ?Subroutine4                                      8
     SampleApp_HandleKeys                             62
     ??Subroutine13_0                                  5
     SampleApp_MessageMSGCB                          227
     ?Subroutine7                                     16
     ?Subroutine1                                      6
     SampleApp_SendPeriodicMessage                   106
     ??Subroutine12_0                                  6
     ?Subroutine0                                      3
     SampleApp_SendFlashMessage                      103
     ?Subroutine9                                     10
     ?Subroutine6                                      7
     SampleApp_SendPointToPointMessage
                                                     122
     ?Subroutine3                                      8
     ?Subroutine2                                      8
     ?Subroutine10                                    10
     SampleApp_SendGroupMessage                      142
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_HandleKeys?relay                      6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleApp_SendPeriodicMessage?relay             6
     ??SampleApp_SendFlashMessage?relay                6
     ??SampleApp_SendPointToPointMessage?relay         6
     ??SampleApp_SendGroupMessage?relay                6
     ?<Constant "Hello World\n">                      13
     ?<Constant "Group 11">                            9
     ?<Constant "SampleApp">                          10
     ?<Constant "temp=">                               6
     ?<Constant "\n">                                  2
     ?<Constant "humidity=">                          10
     ?<Constant " ">                                   2
     ?<Constant "\241\346">                            3
     ?<Constant "H">                                   2
     ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56   10
     ?<Constant {49, 49, 87, 72, 72, 49, 57, 51, 48   28

 
 1 434 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   113 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 482 bytes of CODE  memory
   113 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    65 bytes of XDATA memory

Errors: none
Warnings: none
